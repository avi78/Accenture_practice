To find a target element in an array, we can use two common approaches:

1. **Linear Search**: This approach scans each element in the array one by one and checks if it matches the target element.
2. **Binary Search**: This approach is efficient for sorted arrays and repeatedly divides the search interval in half.

### 1. Linear Search
- **Time Complexity**: \( O(n) \), where \( n \) is the number of elements in the array.
- **Usage**: Useful when the array is unsorted or small.

### Python Implementation (Linear Search)
```python
def linear_search(arr, target):
    for i in range(len(arr)):
        if arr[i] == target:
            return i
    return -1

# Example usage
arr = [4, 2, 7, 1, 3]
target = 7
result = linear_search(arr, target)
if result != -1:
    print(f"Element {target} found at index {result}.")
else:
    print(f"Element {target} not found in the array.")
```

### C++ Implementation (Linear Search)
```cpp
#include <iostream>
using namespace std;

int linearSearch(int arr[], int n, int target) {
    for (int i = 0; i < n; i++) {
        if (arr[i] == target)
            return i;
    }
    return -1;
}

int main() {
    int arr[] = {4, 2, 7, 1, 3};
    int n = sizeof(arr) / sizeof(arr[0]);
    int target = 7;
    int result = linearSearch(arr, n, target);
    if (result != -1)
        cout << "Element " << target << " found at index " << result << "." << endl;
    else
        cout << "Element " << target << " not found in the array." << endl;
    return 0;
}
```

### Java Implementation (Linear Search)
```java
public class Main {
    public static int linearSearch(int[] arr, int target) {
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] == target)
                return i;
        }
        return -1;
    }

    public static void main(String[] args) {
        int[] arr = {4, 2, 7, 1, 3};
        int target = 7;
        int result = linearSearch(arr, target);
        if (result != -1)
            System.out.println("Element " + target + " found at index " + result + ".");
        else
            System.out.println("Element " + target + " not found in the array.");
    }
}
```

### 2. Binary Search
- **Time Complexity**: \( O(\log n) \), where \( n \) is the number of elements in the array.
- **Usage**: Useful when the array is sorted.

### Python Implementation (Binary Search)
```python
def binary_search(arr, target):
    left, right = 0, len(arr) - 1
    while left <= right:
        mid = left + (right - left) // 2
        if arr[mid] == target:
            return mid
        elif arr[mid] < target:
            left = mid + 1
        else:
            right = mid - 1
    return -1

# Example usage
arr = [1, 2, 3, 4, 7]
target = 7
result = binary_search(arr, target)
if result != -1:
    print(f"Element {target} found at index {result}.")
else:
    print(f"Element {target} not found in the array.")
```

### C++ Implementation (Binary Search)
```cpp
#include <iostream>
using namespace std;

int binarySearch(int arr[], int n, int target) {
    int left = 0, right = n - 1;
    while (left <= right) {
        int mid = left + (right - left) / 2;
        if (arr[mid] == target)
            return mid;
        else if (arr[mid] < target)
            left = mid + 1;
        else
            right = mid - 1;
    }
    return -1;
}

int main() {
    int arr[] = {1, 2, 3, 4, 7};
    int n = sizeof(arr) / sizeof(arr[0]);
    int target = 7;
    int result = binarySearch(arr, n, target);
    if (result != -1)
        cout << "Element " << target << " found at index " << result << "." << endl;
    else
        cout << "Element " << target << " not found in the array." << endl;
    return 0;
}
```

### Java Implementation (Binary Search)
```java
public class Main {
    public static int binarySearch(int[] arr, int target) {
        int left = 0, right = arr.length - 1;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (arr[mid] == target)
                return mid;
            else if (arr[mid] < target)
                left = mid + 1;
            else
                right = mid - 1;
        }
        return -1;
    }

    public static void main(String[] args) {
        int[] arr = {1, 2, 3, 4, 7};
        int target = 7;
        int result = binarySearch(arr, target);
        if (result != -1)
            System.out.println("Element " + target + " found at index " + result + ".");
        else
            System.out.println("Element " + target + " not found in the array.");
    }
}
```

### Summary
- **Linear Search**: Suitable for unsorted arrays or when the array size is small.
- **Binary Search**: Efficient for sorted arrays, significantly reduces the number of comparisons.