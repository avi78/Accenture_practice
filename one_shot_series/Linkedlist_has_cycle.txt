To determine if a linked list has a cycle, a common and efficient approach is to use the **Floyd's Cycle-Finding Algorithm** (also known as the "tortoise and hare" approach). This algorithm uses two pointers, a slow pointer and a fast pointer, to traverse the list. If there is a cycle, the fast pointer will eventually meet the slow pointer; if there isn't, the fast pointer will reach the end of the list.

### Floyd's Cycle-Finding Algorithm
- **Slow pointer (`slow`)**: Moves one step at a time.
- **Fast pointer (`fast`)**: Moves two steps at a time.
- If there is a cycle, the fast pointer will eventually catch up to the slow pointer inside the cycle.

### Time Complexity
- **O(n)**, where \( n \) is the number of nodes in the linked list. This is because each pointer will traverse at most \( n \) nodes.

### Space Complexity
- **O(1)**, since it uses only a constant amount of additional memory.

### Implementation in Different Languages

#### Python Implementation
```python
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def hasCycle(head):
    slow, fast = head, head
    while fast and fast.next:
        slow = slow.next
        fast = fast.next.next
        if slow == fast:
            return True
    return False

# Example Usage
head = ListNode(1)
second = ListNode(2)
third = ListNode(3)
head.next = second
second.next = third
third.next = head  # Creating a cycle

print(hasCycle(head))  # Output: True
```

#### C++ Implementation
```cpp
#include <iostream>
using namespace std;

struct ListNode {
    int val;
    ListNode* next;
    ListNode(int x) : val(x), next(NULL) {}
};

bool hasCycle(ListNode *head) {
    ListNode *slow = head, *fast = head;
    while (fast && fast->next) {
        slow = slow->next;
        fast = fast->next->next;
        if (slow == fast) {
            return true;
        }
    }
    return false;
}

int main() {
    ListNode* head = new ListNode(1);
    ListNode* second = new ListNode(2);
    ListNode* third = new ListNode(3);
    head->next = second;
    second->next = third;
    third->next = head; // Creating a cycle

    cout << (hasCycle(head) ? "True" : "False") << endl;  // Output: True
    return 0;
}
```

#### Java Implementation
```java
class ListNode {
    int val;
    ListNode next;
    ListNode(int x) {
        val = x;
        next = null;
    }
}

public class Main {
    public static boolean hasCycle(ListNode head) {
        ListNode slow = head;
        ListNode fast = head;
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
            if (slow == fast) {
                return true;
            }
        }
        return false;
    }

    public static void main(String[] args) {
        ListNode head = new ListNode(1);
        ListNode second = new ListNode(2);
        ListNode third = new ListNode(3);
        head.next = second;
        second.next = third;
        third.next = head;  // Creating a cycle

        System.out.println(hasCycle(head));  // Output: True
    }
}
```

### Explanation
1. **Initialization**: Both the slow and fast pointers start at the head of the list.
2. **Traversal**: The slow pointer moves one step at a time, while the fast pointer moves two steps. If a cycle exists, they will eventually meet inside the cycle.
3. **Cycle Detection**: If the pointers meet (`slow == fast`), the list has a cycle. If the fast pointer reaches the end of the list (i.e., `fast == null` or `fast.next == null`), the list does not have a cycle.

This algorithm is efficient and is widely used for cycle detection problems in linked lists.