To merge two sorted arrays into a single sorted array, you can use a two-pointer approach, which is efficient with a time complexity of \(O(n + m)\), where \(n\) and \(m\) are the lengths of the two arrays. Below are implementations in C++, Python, and Java.

### C++

```cpp
#include <iostream>
#include <vector>
using namespace std;

vector<int> mergeSortedArrays(const vector<int>& arr1, const vector<int>& arr2) {
    int n = arr1.size();
    int m = arr2.size();
    vector<int> result(n + m);
    
    int i = 0, j = 0, k = 0;
    
    while (i < n && j < m) {
        if (arr1[i] < arr2[j]) {
            result[k++] = arr1[i++];
        } else {
            result[k++] = arr2[j++];
        }
    }
    
    while (i < n) {
        result[k++] = arr1[i++];
    }
    
    while (j < m) {
        result[k++] = arr2[j++];
    }
    
    return result;
}

int main() {
    vector<int> arr1 = {1, 3, 5, 7};
    vector<int> arr2 = {2, 4, 6, 8};
    
    vector<int> mergedArray = mergeSortedArrays(arr1, arr2);
    
    cout << "Merged array: ";
    for (int num : mergedArray) {
        cout << num << " ";
    }
    cout << endl;
    
    return 0;
}
```

### Python

```python
def merge_sorted_arrays(arr1, arr2):
    i, j = 0, 0
    result = []
    
    while i < len(arr1) and j < len(arr2):
        if arr1[i] < arr2[j]:
            result.append(arr1[i])
            i += 1
        else:
            result.append(arr2[j])
            j += 1
    
    # Append remaining elements
    result.extend(arr1[i:])
    result.extend(arr2[j:])
    
    return result

# Example usage
arr1 = [1, 3, 5, 7]
arr2 = [2, 4, 6, 8]
merged_array = merge_sorted_arrays(arr1, arr2)
print("Merged array:", merged_array)
```

### Java

```java
import java.util.Arrays;

public class MergeSortedArrays {
    public static int[] mergeSortedArrays(int[] arr1, int[] arr2) {
        int n = arr1.length;
        int m = arr2.length;
        int[] result = new int[n + m];
        
        int i = 0, j = 0, k = 0;
        
        while (i < n && j < m) {
            if (arr1[i] < arr2[j]) {
                result[k++] = arr1[i++];
            } else {
                result[k++] = arr2[j++];
            }
        }
        
        while (i < n) {
            result[k++] = arr1[i++];
        }
        
        while (j < m) {
            result[k++] = arr2[j++];
        }
        
        return result;
    }

    public static void main(String[] args) {
        int[] arr1 = {1, 3, 5, 7};
        int[] arr2 = {2, 4, 6, 8};
        
        int[] mergedArray = mergeSortedArrays(arr1, arr2);
        
        System.out.println("Merged array: " + Arrays.toString(mergedArray));
    }
}
```

### Explanation
nlogn
1. **Initialization**: Create a result array large enough to hold all elements from both input arrays.
2. **Merging Process**: Use two pointers to iterate through both input arrays. Compare elements from both arrays and add the smaller element to the result array.
3. **Appending Remaining Elements**: After one array is exhausted, append the remaining elements of the other array to the result array.

These implementations handle merging two sorted arrays efficiently and can be easily adapted to different scenarios.