To find the middle of a singly linked list, there are several approaches. One of the most efficient methods is using the **two-pointer (slow and fast) approach**. This approach uses two pointers: one (`slow`) that moves one node at a time, and another (`fast`) that moves two nodes at a time. When the `fast` pointer reaches the end of the list, the `slow` pointer will be at the middle.

### Time Complexity
- The time complexity of this approach is \( O(n) \), where \( n \) is the number of nodes in the linked list.
- The space complexity is \( O(1) \) because no additional data structures are used.

### Implementation in Different Languages

#### Python Implementation
```python
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def find_middle(head):
    slow = fast = head
    while fast and fast.next:
        slow = slow.next
        fast = fast.next.next
    return slow.val

# Example Usage
head = ListNode(1)
head.next = ListNode(2)
head.next.next = ListNode(3)
head.next.next.next = ListNode(4)
head.next.next.next.next = ListNode(5)

print("Middle of the linked list:", find_middle(head))  # Output: 3
```

#### C++ Implementation
```cpp
#include <iostream>
using namespace std;

struct ListNode {
    int val;
    ListNode* next;
    ListNode(int x) : val(x), next(NULL) {}
};

int findMiddle(ListNode* head) {
    ListNode* slow = head;
    ListNode* fast = head;
    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }
    return slow->val;
}

int main() {
    ListNode* head = new ListNode(1);
    head->next = new ListNode(2);
    head->next->next = new ListNode(3);
    head->next->next->next = new ListNode(4);
    head->next->next->next->next = new ListNode(5);

    cout << "Middle of the linked list: " << findMiddle(head) << endl;  // Output: 3
    return 0;
}
```

#### Java Implementation
```java
class ListNode {
    int val;
    ListNode next;
    ListNode(int x) {
        val = x;
        next = null;
    }
}

public class Main {
    public static int findMiddle(ListNode head) {
        ListNode slow = head;
        ListNode fast = head;
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }
        return slow.val;
    }

    public static void main(String[] args) {
        ListNode head = new ListNode(1);
        head.next = new ListNode(2);
        head.next.next = new ListNode(3);
        head.next.next.next = new ListNode(4);
        head.next.next.next.next = new ListNode(5);

        System.out.println("Middle of the linked list: " + findMiddle(head));  // Output: 3
    }
}
```

### Explanation
1. **Initialization**: Both `slow` and `fast` pointers are initialized to the head of the linked list.
2. **Traversal**: The `fast` pointer moves twice as fast as the `slow` pointer. By the time the `fast` pointer reaches the end, the `slow` pointer will be at the middle.
3. **Return the Middle**: The value of the `slow` pointer is returned as it now points to the middle node of the list.

This method works efficiently even when the number of nodes is odd or even. When the number of nodes is even, it returns the first of the two middle nodes.